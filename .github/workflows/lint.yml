name: Lint

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
    paths:
      - '**/*.md'

# 添加权限声明
permissions:
  contents: write
  pull-requests: write

jobs:
  markdown-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 确保检出的是 PR 的头部 SHA 或当前的引用，这有助于正确地进行后续的 git push
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          persist-credentials: true

      - name: Debug info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "PR head ref: ${{ github.event.pull_request.head.ref || 'N/A' }}"
          echo "Current ref: ${{ github.ref }}"
          # 检查 PR 的目标分支 (base_ref)
          echo "PR base ref (target): ${{ github.base_ref || 'N/A' }}"

      - name: Lint
        continue-on-error: true
        run: |
          curl -fsSL https://raw.githubusercontent.com/huacnlee/autocorrect/main/install | sh
          autocorrect --fix

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes detected."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected. Preparing to commit..."
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add -A
          git commit -m "Auto fix formatting by autocorrect [ci skip]"

      # --- 方案一：如果是 PR 触发，直接将修复推回源分支 (更新现有 PR) ---
      - name: Push changes to PR branch
        # 仅在 pull_request 事件触发且有修改时执行
        if: steps.check_changes.outputs.has_changes == 'true' && github.event_name == 'pull_request'
        run: |
          # 推送修复到 PR 的源分支
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
        continue-on-error: true

      # --- 方案二：如果不是 PR (例如 push 到非默认分支)，则创建新的 PR 提出修复 ---
      - name: Create Pull Request with fix
        # 仅在非 pull_request 事件触发且有修改时执行
        if: steps.check_changes.outputs.has_changes == 'true' && github.event_name != 'pull_request'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Auto fix formatting by autocorrect [ci skip]"
          branch: auto-fix-${{ github.run_number }}
          delete-branch: true
          title: "Auto fix formatting by autocorrect"
          # ** 核心修复 **：明确指定 PR 的目标分支
          # 如果在 PR 事件中运行，则 base_ref 是目标分支。如果不是，我们使用 'main' 作为默认目标。
          base: ${{ github.base_ref || 'main' }}
          body: |
            This PR contains automatic fixes by the `autocorrect` tool.
            Generated by GitHub Actions run ${{ github.run_number }}.
